---
name: AWS CloudFormation "Deploy CloudFormation Stack" Action for GitHub Actions

on: 
  push:
    branches: [ main ]

jobs:
  # This workflow contains a single job called "deploy"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
#     outputs:
#       output1: ${{ steps.DNS.outputs.ALB }}
#       output2: ${{ steps.DNS.outputs.S3DNS }}
#       output3: ${{ steps.DNS.outputs.S3Name }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code from master branch
        uses: actions/checkout@v2

      # Configure AWS Credential
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ACCESS_KEY_SECRET }}
          aws-region: eu-central-1

      # Deploy to AWS CloudFormation
      - name: Deploy to AWS CloudFormation VPC
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: assessment-vpc-stack
          template: templates/vpc.yaml
          no-fail-on-empty-changeset: "1"

      - name: Deploy to AWS CloudFormation S3 public
        id: s3
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: assessment-s3-private-stack
          template: templates/s3bucket.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            AppName=testapp,
            Encryption=enabled,
            PublicAccess=disabled,
            Versioning=enabled,
            Environment=dev

      - name: Deploy to AWS CloudFormation efs template
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: assessment-efs-stack
          template: templates/efs.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >- 
            Application=testapp,
            Environment=dev,
            Encrypted=true

      - name: Deploy to AWS CloudFormation rds template
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: assessment-rds-stack
          template: templates/rds.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >- 
            Environment=dev,
            InstanceId=testinstance,
            DatabaseName=testdb, 
            DatabaseUser=testuser,
            InstanceType=db.t3.micro,
            StorageSize=20,
            EngineType=mysql,
            EngineVersion=8.0.16

      - name: Deploy to AWS CloudFormation instancerole
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: assessment-instancerole-stack
          template: templates/instancerole.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >- 
            AppName=testapp,
            Environment=dev
                  
      - name: Deploy to AWS CloudFormation instance template
        id: instance-stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: assessment-instance-stack
          template: templates/instance.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >- 
            AppName=testapp,
            Environment=dev,
            InstanceType=t2.micro,
            MinInstances=2,
            MaxInstances=4,
            DesiredInstances=2,
            AMI=/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2,
            ARNCertificate=arn:aws:acm:eu-central-1:735556469799:certificate/efcf013c-a3a1-4213-8991-c8e78ec35107,
            CPUPolicyTargetValue=70

#       - name: Output for ALB DNS Name
#         id: DNS 
#         run: |
#           echo "::set-output name=ALB::$PublicAlbDnsName"
#           echo "::set-output name=S3DNS::$PublicS3DnsName"
#           echo "::set-output name=S3Name::$PublicS3Name"
#         env:
#           PublicAlbDnsName: ${{ steps.instance-stack.outputs.LoadBalancerDNSName }}
#           PublicS3DnsName: ${{ steps.s3.outputs.S3BucketPublicDNSName }}
#           PublicS3Name: ${{ steps.s3.outputs.S3BucketName }}
  

#   deploy2:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest
#     needs: deploy
#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - name: Checkout code from master branch
#         uses: actions/checkout@v2

      # - name: Wait for instancestack to succeed
      #   uses: lewagon/wait-on-check-action@v1.0.0
      #   with:
      #     ref: ${{ github.ref }}
      #     check-name: 'Deploy to AWS CloudFormation instance template'
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     wait-interval: 10

#       # Configure AWS Credential
#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.ACCESS_KEY }}
#           aws-secret-access-key: ${{ secrets.ACCESS_KEY_SECRET }}
#           aws-region: us-east-1
#       # Deploy to AWS CloudFormation
#       - name: Deploy to AWS CloudFormation cloudfront template
#         id: CDN
#         uses: aws-actions/aws-cloudformation-github-deploy@v1
#         with:
#           name: assessment-cloudfront-stack
#           template: templates/cloudfront.yaml
#           no-fail-on-empty-changeset: "1"
#           parameter-overrides: >-
#             WPDomainName=team5.nordcloudtap.com, 
#             ARNCertificate=arn:aws:acm:us-east-1:120548146190:certificate/99e10bd8-dc0c-463f-8c86-25d27aa273ae,
#             PublicAlbDnsName=${{ needs.deploy.outputs.output1 }},
#             S3BucketDNS=${{ needs.deploy.outputs.output2 }},
#             S3BucketName=${{ needs.deploy.outputs.output3 }}
