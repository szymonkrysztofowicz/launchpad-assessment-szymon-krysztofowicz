---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Module-D-LaunchTemplate-AutoScalingGroup-ApplicationLoadBalancer"
# yamllint disable rule:line-length

######################################################################
#  This template contains parameters and resources for creating an Multi-AZ Auto Scaling Group
#  and  Launch Template, Scaling Policies, Alarms and Life Cycle Hooks for the ASG.
#  Application Load Balancer and Listener and Target Group for the ALB
#  Security Groups for both ALB and ASG, DNS entry for ALB and SNS topic for ASG.
#
#
#  List of resources created:
#                           1. Load Balancer Security Grouo
#                           2. Instance Security Group
#                           3. Launch template
#                           4. Application Load Balancer
#                           5. Application Load Balancer Target Group
#                           6. Application Load Balancer Listener
#                           7. Auto Scaling Group
#                           8. Scaling policies for Auto Scaling Group
#                           9. Alarms for Auto Scaling Group
#                           10. SNS topic for receiving scaling actions
#                           11. Lifecycle hooks for scaling actions
#                           12. DNS entry pointing to ALB
#
#
# Implementation resources
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-policy.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-recordsetgroup.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-topic.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-lifecyclehook.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html
#
######################################################################

Parameters:

  AppName:
    Type: String

  Environment:
    Type: String
    AllowedValues:
      - 'dev'
      - 'qa'
      - 'prod'

  SSLCertificateARN:
    Type: String

  InstanceType:
    Type: String

  MinInstances:
    Type: String

  MaxInstances:
    Type: String

  DesiredInstances:
    Type: String

  AMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>

  CPUPolicyTargetValue:
    Type: String

  WordpressUser:
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  WordpressEmail:
    Type: String
    MinLength: '1'
    MaxLength: '32'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*@\w\D.*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  WPDomainName:
    AllowedPattern: ^$|(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$
    Description: 'The main domain name of the WordPress site (e.g. example.com).'
    Type: String

Resources:

  #########################################################################
  # Security groups
  #########################################################################

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow HTTP and HTTPS to Load Balancer'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: name
          Value: LoadBalancerSecurityGroup
      VpcId: '{{resolve:ssm:/vpc/id}}'


  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow HTTP to EC2 Instances'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: name
          Value: InstanceSecurityGroup
      VpcId: '{{resolve:ssm:/vpc/id}}'

  myLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7
  #########################################################################
  # Launch Template Configuration
  #########################################################################

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          wordpress_install:
            - install_cfn
            - setup
            - install_wordpress
            - install_cwagent
            - logs
        install_cwagent:
          commands:
            1_cwagent: 
              command: |
                cd /opt
                sudo su
                sudo yum install -y amazon-cloudwatch-agent
                sudo touch /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
                cd /opt/aws/amazon-cloudwatch-agent/etc
                sudo chmod +x amazon-cloudwatch-agent.json
                cat <<EOF > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
                {
                    "agent": {
                    "metrics_collection_interval": 10,
                    "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
                    },
                    "metrics": {
                    "namespace": "CWAgent/Assessment/EC2",
                    "metrics_collected": {
                        "mem": {
                            "measurement": [
                                {"name": "used_percent", "rename": "Memory used percent", "unit": "Megabytes"}
                            ],
                            "metrics_collection_interval": 60
                        },
                        "disk": {
                            "resources": ["/", "/tmp"],
                            "measurement": ["disk_used_percent"],
                            "ignore_file_system_types": ["sysfs", "devtmpfs"]
                        }
                    },
                    "append_dimensions": {
                        "InstanceId": "\${aws:InstanceId}"
                    },
                    "aggregation_dimensions" : [["ImageId"]],
                    "force_flush_interval" : 30
                    }
                }
                EOF
                sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
        setup:
          commands:
            1_efs: 
              command: |
                yum -y install amazon-efs-utils
                yum -y install jq
                yum -y install awslogs
                AZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
                AWSREGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq .region -r)
                export AWS_DEFAULT_REGION=$AWSREGION
                EFSID=$(aws ssm get-parameter --name "/efs/filesystem/id" | jq -r ".Parameter.Value")
                EFSIPAZA=$(aws ssm get-parameter --name "/efs/mounttarget/a/ip" | jq -r ".Parameter.Value")
                EFSIPAZB=$(aws ssm get-parameter --name "/efs/mounttarget/b/ip" | jq -r ".Parameter.Value")
                if [[ "$AZ" =~ 'a'$ ]]; then EFSIP=$EFSIPAZA; elif [[ "$AZ" =~ 'b'$ ]]; then EFSIP=$EFSIPAZB; else EFSIP="0.0.0.0"; fi
                echo -e "$EFSIP\t$EFSID.efs.$AWSREGION.amazonaws.com\t# Shared EFS" >> /etc/hosts
                mkdir -p /var/www/html
                echo -e "$EFSID\t/var/www/html\tefs\t_netdev\t0 2" >> /etc/fstab
                echo -e "$EFSIP:/\t/data\tnfs4\trw,context=system_u:object_r:httpd_sys_content_t:s0,relatime,vers=4.1,rsize=1048576,wsize=1048576,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,local_lock=none\t0 2" >> /etc/fstab
                mount -t efs -o tls,iam $EFSID /var/www/html
        logs:
          files:
            /etc/awslogs/awslogs.conf:
              content: !Join 
                - ''
                - - |
                    [general]
                  - |
                    state_file= /var/awslogs/state/agent-state
                  - |
                    [/var/log/cfn-init.log]
                  - |
                    file = /var/log/cfn-init.log
                  - 'log_group_name = '
                  - !Ref myLogGroup
                  - |+
                  - |
                    log_stream_name = {instance_id}/cfn-init.log
                  - 'datetime_format = %d/%b/%Y:%H:%M:%S'
              mode: '000400'
              owner: root
              group: root
          commands:
            01_create_state_directory:
              command: mkdir -p /var/awslogs/state
          services:
            sysvinit:
              awslogsd:
                enabled": 'true'
                ensureRunning: 'true'
                files: /etc/awslogs/awslogs.conf
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+
                  - region=
                  - !Ref 'AWS::Region'
                  - |+
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource LaunchConfig ' 
                  - '         --configsets wordpress_install '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_wordpress:
          sources:
            /var/www/html: 'http://wordpress.org/latest.tar.gz'
          files:
            /tmp/create-wp-config:
              content: !Sub
                  - |
                    #!/bin/bash -xe
                    sudo wget -P /usr/bin https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
                    cd /usr/bin
                    sudo chmod +x wp-cli.phar
                    sudo mv wp-cli.phar /usr/bin/wp
                    sudo wget -P /var/www/html https://wordpress.org/latest.tar.gz
                    cd /var/www/html
                    sudo tar -vxzf latest.tar.gz -C /var/www/html
                    sudo cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php
                    cd /var/www/html/wordpress/
                    AWSREGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq .region -r)
                    export AWS_DEFAULT_REGION=$AWSREGION
                    DBNAME=$(aws ssm get-parameter --name "/rds/mysql/main/name" | jq -r ".Parameter.Value")
                    dbusername=$(aws secretsmanager get-secret-value --secret-id "MySecretForDBtestdb" --output text --query SecretString --region "$AWSREGION" | jq -r '.["username"]')
                    dbpassword=$(aws secretsmanager get-secret-value --secret-id "MySecretForDBtestdb" --output text --query SecretString --region "$AWSREGION" | jq -r '.["password"]')
                    wpusername=$(aws secretsmanager get-secret-value --secret-id "WordpressPassword" --output text --query SecretString --region "$AWSREGION" | jq -r '.["username"]')
                    export wpuser=$wpusername
                    wppassword=$(aws secretsmanager get-secret-value --secret-id "WordpressPassword" --output text --query SecretString --region "$AWSREGION" | jq -r '.["password"]')
                    export wppas=$wppassword
                    wpemail=$(aws secretsmanager get-secret-value --secret-id "WordpressEmail" --output text --query SecretString --region "$AWSREGION" | jq -r '.["email"]')
                    export wpemail2=$wpemail
                    hostendpoint=$(aws ssm get-parameter --name "/rds/mysql/main/address" | jq -r ".Parameter.Value")
                    s3bucketname=$(aws ssm get-parameter --name "/s3/testapp-735556469799-private-dev/name" --region "$AWSREGION"| jq -r ".Parameter.Value")
                    export bucketname=$s3bucketname
                    sed -i "s/database_name_here/$DBNAME/g" wp-config.php
                    sed -i "s/'username_here'/'$dbusername'/g" wp-config.php
                    sed -i "s/'password_here'/'$dbpassword'/g" wp-config.php
                    sed -i "s/'localhost'/'$hostendpoint'/g" wp-config.php
                    if ! $(wp core is-installed --allow-root); then
                        wp core install --url="${WPDomainName}" --title='Wordpress on AWS' --admin_user="$wpuser" --admin_password="$wppas" --allow-root --admin_email="$wpemail2"
                        sudo chown -R apache:apache /var/www/html/wordpress
                        sudo chmod u+wrx /var/www/html/wordpress/wp-content/*
                    fi
                    RESULT=$?
                    echo $RESULT
                    if [ $RESULT -eq 0 ]; then
                        touch /var/www/html/wordpress/wordpress.initialized
                    else
                        touch /var/www/html/wordpress/wordpress.failed
                    fi
                    sed -i "/*.Add any custom values between this line and the.*/a /* SSL Settings */\ndefine(""'""FORCE_SSL_ADMIN""'"", true);\n \n/* Turn HTTPS ""'""on""'"" if HTTP_X_FORWARDED_PROTO matches ""'""https""'"" */\nif (strpos(""$""_SERVER[""'""HTTP_X_FORWARDED_PROTO""'""], ""'""https""'"") !== false) {\n    ""$""_SERVER[""'""HTTPS""'""] = ""'""on""'"";\n}" wp-config.php
                    cat <<EOF >/etc/httpd/conf.d/wordpress.conf
                    ServerName 127.0.0.1:80
                    DocumentRoot /var/www/html/wordpress
                    <Directory /var/www/html/wordpress>
                      Options Indexes FollowSymLinks
                      AllowOverride All
                      Require all granted
                    </Directory>
                    EOF
                    if [ -z "$(aws s3 ls s3://"$bucketname"/wp-includes)" ]; then
                      aws s3 cp --recursive /var/www/html/wordpress/wp-includes s3://"$bucketname"/wp-includes
                      aws s3 cp --recursive /var/www/html/wordpress/wp-content s3://"$bucketname"/wp-content
                    else
                      echo "it exists"
                    fi
                    aws sns publish --topic-arn ${SNSTOPICARN} --message "EC2 is ready"
                  - SNSTOPICARN: !Ref SNSTopic
              mode: '000500'
              owner: root
              group: root
          commands:
            01_configure_wordpress:
              command: /tmp/create-wp-config
              cwd: /var/www/html/wordpress
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      LaunchTemplateName: LaunchTemplate
      LaunchTemplateData:
        DisableApiTermination: false
        ImageId: !Ref AMI
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Name: '{{resolve:ssm:/iam/instanceprofile/name}}'
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash -xe
              yum update -y
              amazon-linux-extras enable php7.4
              yum install -y php
              yum install -y httpd php-mysqlnd.x86_64
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --region ${AWS::Region} --configsets wordpress_install
              echo test
  #########################################################################
  # Load Balancer Configuration
  #########################################################################
  AppElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      Name: !Join ["-", [!Ref AppName, !Ref Environment, "alb"]]
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - '{{resolve:ssm:/vpc/subnet/public/a/id}}'
        - '{{resolve:ssm:/vpc/subnet/public/b/id}}'

  AppElasticLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: '{{resolve:ssm:/vpc/id}}'
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      Name: !Join ["-", [!GetAtt AppElasticLoadBalancer.LoadBalancerName, "targets"]]
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1

  AppElasticLoadBalancerListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref SSLCertificateARN
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppElasticLoadBalancerTargetGroup
      LoadBalancerArn: !Ref AppElasticLoadBalancer
      Port: 443
      Protocol: HTTPS

  AppElasticLoadBalancerListener80:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref AppElasticLoadBalancer
      Port: 80
      Protocol: HTTP

  ########################################################################
  # Auto Scaling Group and Scaling Policy
  ########################################################################
  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: !Ref MaxInstances
      MinSize: !Ref MinInstances
      DesiredCapacity: !Ref DesiredInstances
      VPCZoneIdentifier:
        - '{{resolve:ssm:/vpc/subnet/private/application/a/id}}'
        - '{{resolve:ssm:/vpc/subnet/private/application/b/id}}'
      TargetGroupARNs:
        - !Ref AppElasticLoadBalancerTargetGroup
      NotificationConfigurations:
        - TopicARN: !Ref SNSTopic
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_TERMINATE

  AppTargetTrackingScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AppAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref CPUPolicyTargetValue

#  AppStepDownScalingPolicy:
#    Type: AWS::AutoScaling::ScalingPolicy

  #######################################################################
  # Cloud Watch Alarms
  #######################################################################
  AppHighCpuAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Alarm for CPU usage on AutoScalingGroup'
      ActionsEnabled: false
#      AlarmActions:   # Required when ActionsEnabled=True
#        - !Ref SNSTopic
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AppAutoScalingGroup   # Logical name of an AWS::EC2::Instance resource - How do we make this for ASG?
      ComparisonOperator: GreaterThanOrEqualToThreshold   # LessThanOrEqualToThreshold for low cpu
      DatapointsToAlarm: '1'  # This is the M value in -- M out of N -- alarm
      EvaluationPeriods: '3'  # This is the N value in -- M out of N -- alarm
      Statistic: Average
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: '60'
      Threshold: !Ref CPUPolicyTargetValue
# Copy this to LowCpuAlarm when complete.
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-cloudwatch.html
#  AppLowCpuAlarm:
#    Type: AWS::CloudWatch::Alarm

  #######################################################################
  # SNS Topic for receiving scaling notificetions
  #######################################################################

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      FifoTopic: false
      Subscription:
        - Endpoint: "szymon.krysztofowicz@nordcloud.com"
          Protocol: email
      TopicName: !Join ["-", [!Ref AppName, "asgevent", "topic"]]
  #######################################################################
  # ASG Lifecycle hooks for scale actions
  #######################################################################

#  ScaleUpHook:
#    AWS::AutoScaling::LifecycleHook

#  ScaleDownHook:
#    AWS::AutoScaling::LifecycleHook


  SecretWPKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: WordpressPassword
      Description: "This secret has a dynamically generated secret password for the wordpress."
      GenerateSecretString:
        SecretStringTemplate: !Join ['',['{"username": "', !Ref WordpressUser,'"}','{"email": "', !Ref WordpressEmail,'"}' ]]
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\&`_:'
      Tags:
        -
          Key: Name
          Value: Wordpress
  SecretWPEmail:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: WordpressEmail
      Description: "This secret has a wordpress email for admin"
      SecretString: !Join ['',['{"email": "', !Ref WordpressEmail,'"}' ]]
      Tags:
        -
          Key: Name
          Value: Wordpress
  #######################################################################
  # DNS record pointing to loadbalancer
  #######################################################################
#   DNSRecord:
#     Type: AWS::Route53::RecordSetGroup
#     Properties:
#       Comment: "Create records to redirect IPv4 traffic to ELB"
#       HostedZoneId: Z10411603QOWZDGJ407SV
#       RecordSets:
#         - Name: team4.nordcloudtap.com.
#           Type: A
#           AliasTarget:
#             EvaluateTargetHealth: false
#             HostedZoneId: !GetAtt AppElasticLoadBalancer.CanonicalHostedZoneID
#             DNSName: !GetAtt AppElasticLoadBalancer.DNSName
