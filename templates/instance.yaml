---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Module-D-LaunchTemplate-AutoScalingGroup-ApplicationLoadBalancer"
# yamllint disable rule:line-length
######################################################################
# Parameters
######################################################################
Parameters:

  AppName:
    Type: String

  Environment:
    Type: String
    AllowedValues:
      - 'dev'
      - 'qa'
      - 'prod'

  SSLCertificateARN:
    Type: String

  InstanceType:
    Type: String

  MinInstances:
    Type: String

  MaxInstances:
    Type: String

  DesiredInstances:
    Type: String

  AMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>

  CPUPolicyTargetValue:
    Type: String

  WordpressUser:
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  WordpressEmail:
    Type: String
    MinLength: '1'
    MaxLength: '32'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*@\w\D.*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  WPDomainName:
    AllowedPattern: ^$|(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$
    Description: 'The main domain name of the WordPress site (e.g. example.com).'
    Type: String
######################################################################
# Resources creation
######################################################################
Resources:
  #########################################################################
  # Security groups
  #########################################################################
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow HTTP and HTTPS to Load Balancer'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: name
          Value: LoadBalancerSecurityGroup
      VpcId: '{{resolve:ssm:/vpc/id}}'

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow HTTP to EC2 Instances'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: name
          Value: InstanceSecurityGroup
      VpcId: '{{resolve:ssm:/vpc/id}}'

  LogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7
  #########################################################################
  # Launch Template Configuration
  #########################################################################
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          wordpress_install:
            - install_cfn
            - install_efs
            - install_wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.LaunchTemplate.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource LaunchTemplate '
                  - '         --configsets wordpress_install '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_efs:
          commands:
            01_install_efs:
              command: |
                # Mount shared EFS
                yum -y install amazon-efs-utils
                AZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
                AWSREGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq .region -r)
                export AWS_DEFAULT_REGION=$AWSREGION
                EFSID=$(aws ssm get-parameter --name "/efs/filesystem/id" | jq -r ".Parameter.Value")
                EFSIPAZA=$(aws ssm get-parameter --name "/efs/mounttarget/a/ip" | jq -r ".Parameter.Value")
                EFSIPAZB=$(aws ssm get-parameter --name "/efs/mounttarget/b/ip" | jq -r ".Parameter.Value")
                # Determine which az
                if [[ "$AZ" =~ 'a'$ ]]; then EFSIP=$EFSIPAZA; elif [[ "$AZ" =~ 'b'$ ]]; then EFSIP=$EFSIPAZB; else EFSIP="0.0.0.0"; fi
                # Since DNS lookup of EFS does not work, will have to provide hosts entry for that
                echo -e "$EFSIP\t$EFSID.efs.$AWSREGION.amazonaws.com\t# Shared EFS" >> /etc/hosts
                mkdir -p /var/www/html
                mount -t efs $EFSID /var/www/html
                usermod -a -G apache ec2-user
                chown -R ec2-user:apache /var/www/html
                chmod 2775 /var/www/html && find /var/www/html -type d -exec sudo chmod 2775 {} \;
                find /var/www/html -type f -exec sudo chmod 0664 {} \;
                # Persist the volume in /etc/fstab so it gets mounted again
                echo -e '$EFSID\t/var/www/html\tefs\t_netdev\t0 2' >> /etc/fstab
                
        install_wordpress:
          sources:
            /var/www/html: 'http://wordpress.org/latest.tar.gz'

          commands:
            01_configure_wordpress:
              command: |
                curl -o /bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
                chmod +x /bin/wp
                AWSREGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq .region -r)
                export AWS_DEFAULT_REGION=$AWSREGION
                DBNAME=$(aws ssm get-parameter --name "/rds/mysql/main/name" | jq -r ".Parameter.Value")
                DBUSER=$(aws secretsmanager get-secret-value --secret-id "MySecretForDBtestdb" --output text --query SecretString --region "$AWSREGION" | jq -r '.["username"]' )
                DBPASS=$(aws secretsmanager get-secret-value --secret-id "MySecretForDBtestdb" --output text --query SecretString --region "$AWSREGION" | jq -r '.["password"]' )
                DBENDPOINT=$(aws ssm get-parameter --name "/rds/mysql/main/address" | jq -r ".Parameter.Value")
                cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php
                sed -i "s/username_here/$DBUSER/g" wp-config.php
                sed -i "s/database_name_here/$DBNAME/g" wp-config.php
                sed -i "s/password_here/$DBPASS/g" wp-config.php
                sed -i "s/localhost/$DBENDPOINT/g" wp-config.php
              cwd: /var/www/html/wordpress
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      LaunchTemplateName: LaunchTemplate
      LaunchTemplateData:
        IamInstanceProfile:
          Name: '{{resolve:ssm:/iam/instanceprofile/name}}'
        DisableApiTermination: false
        ImageId: !Ref AMI
        InstanceType: !Ref InstanceType
#        KeyName: MyKeyPair
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              yum update -y
              yum install -y amazon-linux-extras
              yum install -y awslogs httpd mysql gcc-c++ jq php-mysqlnd.x86_64
              amazon-linux-extras enable php7.4
              yum clean metadata
              yum install -y php php-{pear,cgi,common,curl,mbstring,gd,gettext,bcmath,json,xml,fpm,intl,zip,imap,devel,opcache}
              #systemctl enable nfs-server.service
              #yum install -y jq httpd php-mysqlnd php-cli
              opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region} --resource LaunchTemplate --configsets wordpress_install
  #########################################################################
  # Load Balancer Configuration
  #########################################################################
  AppElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      Name: !Join ["-", [!Ref AppName, !Ref Environment, "alb"]]
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - '{{resolve:ssm:/vpc/subnet/public/a/id}}'
        - '{{resolve:ssm:/vpc/subnet/public/b/id}}'

  AppElasticLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: '{{resolve:ssm:/vpc/id}}'
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      Name: !Join ["-", [!GetAtt AppElasticLoadBalancer.LoadBalancerName, "targets"]]
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1

  AppElasticLoadBalancerListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref SSLCertificateARN
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppElasticLoadBalancerTargetGroup
      LoadBalancerArn: !Ref AppElasticLoadBalancer
      Port: 443
      Protocol: HTTPS

  AppElasticLoadBalancerListener80:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref AppElasticLoadBalancer
      Port: 80
      Protocol: HTTP

  ########################################################################
  # Auto Scaling Group and Scaling Policy
  ########################################################################
  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: !Ref MaxInstances
      MinSize: !Ref MinInstances
#       HealthCheckType: ELB
      HealthCheckGracePeriod: 20
      TargetGroupARNs:
        - !Ref AppElasticLoadBalancerTargetGroup
      DesiredCapacity: !Ref DesiredInstances
      VPCZoneIdentifier:   
        - '{{resolve:ssm:/vpc/subnet/private/application/a/id}}'
        - '{{resolve:ssm:/vpc/subnet/private/application/b/id}}'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        WaitOnResourceSignals: false
        PauseTime: PT5M

  AppStepUpScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AppAutoScalingGroup
      PolicyType: StepScaling
      AdjustmentType: ChangeInCapacity
      MetricAggregationType: Average
      EstimatedInstanceWarmup: 300
      StepAdjustments:
        -
          MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 10
          ScalingAdjustment: 1
        -
          MetricIntervalLowerBound: 10
          ScalingAdjustment: 2

  AppStepDownScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AppAutoScalingGroup
      PolicyType: StepScaling
      AdjustmentType: ChangeInCapacity
      MetricAggregationType: Average
      EstimatedInstanceWarmup: 60
      StepAdjustments: 
        - 
          MetricIntervalLowerBound: -15
          MetricIntervalUpperBound: 0
          ScalingAdjustment: -1
        - 
          MetricIntervalUpperBound: -15
          ScalingAdjustment: -2
  #######################################################################
  # Cloud Watch Alarms
  #######################################################################
  AppHighCpuAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      
      AlarmDescription: Scales up
      MetricName: CPUUtilization
      Statistic: Average
      AlarmActions:
        - !Ref AppStepUpScalingPolicy
        - !Ref SNSTopic
      Threshold: 60
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      Period: 240
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: AppAutoScalingGroup

  AppLowCpuAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scales down
      MetricName: CPUUtilization
      Statistic: Average
      AlarmActions:
        - !Ref AppStepDownScalingPolicy
        - !Ref SNSTopic
      Threshold: 60
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 2
      Period: 240
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: AppAutoScalingGroup
  #######################################################################
  # SNS Topic for receiving scaling notificetions
  #######################################################################
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: "szymon.krysztofowicz@nordcloud.com"
          Protocol: email
      TopicName: !Join ["-", [!Ref AppName, "asgevent", "topic"]]
  #######################################################################
  # ASG Lifecycle hooks for scale actions
  #######################################################################
  ScaleUpHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref AppAutoScalingGroup
      LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
      HeartbeatTimeout: '60'
      DefaultResult: CONTINUE

  ScaleDownHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties: 
      AutoScalingGroupName: !Ref AppAutoScalingGroup
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      HeartbeatTimeout: '60'
      DefaultResult: CONTINUE
  #######################################################################
  # WordPress Secrets
  #######################################################################
  SecretWPKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: WordpressPassword
      Description: "This secret has a dynamically generated secret password for the wordpress."
      GenerateSecretString:
        SecretStringTemplate: !Join ['',['{"username": "', !Ref WordpressUser,'"}','{"email": "', !Ref WordpressEmail,'"}' ]]
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\&`_:'
      Tags:
        -
          Key: Name
          Value: Wordpress
 
  SecretWPEmail:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: WordpressEmail
      Description: "This secret has a wordpress email for admin"
      SecretString: !Join ['',['{"email": "', !Ref WordpressEmail,'"}' ]]
      Tags:
        -
          Key: Name
          Value: Wordpress
  #######################################################################
  # DNS record pointing to loadbalancer
  #######################################################################
#   DNSRecord:
#     Type: AWS::Route53::RecordSetGroup
#     Properties:
#       Comment: "Create records to redirect IPv4 traffic to ELB"
#       HostedZoneId: Z10411603QOWZDGJ407SV
#       RecordSets:
#         - Name: team4.nordcloudtap.com.
#           Type: A
#           AliasTarget:
#             EvaluateTargetHealth: false
#             HostedZoneId: !GetAtt AppElasticLoadBalancer.CanonicalHostedZoneID
#             DNSName: !GetAtt AppElasticLoadBalancer.DNSName
